import { DirectionCollection, DirectionInstance } from "../Direction";

import { Deal } from "../Deal";
import { DoubleDummySolver } from "./DoubleDummySolver";
import { Hand } from "../Hand";
import { Card } from "../Card";
import { Seven, Four, King, Two, Six, Nine, Three } from "../deck/CardValues";
import { NoTrump } from "../deck/NoTrump";
import { Hearts, Spades, Clubs } from "../deck/SuitValues";
import { Trump } from "../deck/Trump";

describe('core.DDRegression', () => {
  let deal: Deal;
  let solver: DoubleDummySolver;

  function reset() {
    deal = null;
    solver = null;
  }

  function givenDeal() {
		if (deal == null) {
			deal = new Deal(NoTrump);
			solver = null;
		}
  }

	function given(playerDirection: DirectionInstance, ...suits: string[]) {
    givenDeal();
		deal.getPlayer(playerDirection.getValue()).initWithCards(Hand.fromSuits(suits[0], suits[1], suits[2], suits[3]).getCardsHighToLow());
  }
  
  function solve() {
		givenDeal();
		if (solver == null) {
      solver = new DoubleDummySolver(deal, null);
			solver.search();
		}
  }
  
  function whenLeadBy(player: DirectionInstance, card?: Card) {
		givenDeal();
    deal.setNextToPlay(player.getValue());
    if (card) deal.play(card);
	}

  function givenTrump(trump: Trump) {
		givenDeal();
		deal.setTrump(trump);
  }

  function shouldPlay(player: DirectionInstance, card: Card) {
    solve();
    const result = solver.getBestMoves();
		expect(result[0]).toBe(card);
  }

  function shouldWinTricks(expectedMaxPlayerTricks: number) {
    solve();
    expect(solver.getRoot().getTricksTaken(solver.getRoot().getCurrentPair())).toBe(expectedMaxPlayerTricks);
  }

  function followedBy(player: DirectionInstance, card: Card) {
		deal.play(card);
	}

  beforeEach(() => reset());

  // source: http://www.doubledummy.net/

  it('coffin1', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "", "Q,5", "Q,9", "");
    given(DirectionCollection.WEST_INSTANCE, "9,7", "K,8", "", "");
    given(DirectionCollection.NORTH_INSTANCE, "", "7,4,2", "", "6");
    given(DirectionCollection.EAST_INSTANCE, "8,5", "J,9", "", "");
    givenTrump(Hearts);
    whenLeadBy(DirectionCollection.SOUTH_INSTANCE);
    shouldWinTricks(2);
  });

  it('coffin2', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "8", "J", "A,7,3", "");
    given(DirectionCollection.WEST_INSTANCE, "J", "3", "K,8,5", "");
    given(DirectionCollection.NORTH_INSTANCE, "Q,7", "", "J,9,2", "");
    given(DirectionCollection.EAST_INSTANCE, "K,9,5,2", "", "Q", "");
    givenTrump(Hearts);
    whenLeadBy(DirectionCollection.SOUTH_INSTANCE);
    shouldWinTricks(3);
  });

  it('sidney lenz miniature', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "A,3", "", "", "A");
    given(DirectionCollection.WEST_INSTANCE, "J,2", "A", "", "");
    given(DirectionCollection.NORTH_INSTANCE, "Q,8", "", "", "7");
    given(DirectionCollection.EAST_INSTANCE, "K,10", "", "A", "");
    givenTrump(Spades);
    whenLeadBy(DirectionCollection.SOUTH_INSTANCE);
    shouldWinTricks(2);
  });

  it('ted muller fitting end miniature', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "Q", "", "A,Q", "");
    given(DirectionCollection.WEST_INSTANCE, "K", "", "", "J,10");
    given(DirectionCollection.NORTH_INSTANCE, "", "K,J", "", "A");
    given(DirectionCollection.EAST_INSTANCE, "", "A", "9", "7");
    givenTrump(Spades);
    whenLeadBy(DirectionCollection.EAST_INSTANCE);
    shouldWinTricks(2);
  });

  //source - generated by gnubridge stochastic tests

  it('alpha beta bug giving up trick', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "Q,2", "", "9", "");
    given(DirectionCollection.WEST_INSTANCE, "J,7", "", "", "3");
    given(DirectionCollection.NORTH_INSTANCE, "4,3", "", "5", "");
    given(DirectionCollection.EAST_INSTANCE, "K,5", "", "Q", "");
    givenTrump(Clubs);
    whenLeadBy(DirectionCollection.WEST_INSTANCE, Seven.of(Spades));
    followedBy(DirectionCollection.NORTH_INSTANCE, Four.of(Spades));
    shouldPlay(DirectionCollection.EAST_INSTANCE, King.of(Spades));
    shouldWinTricks(3);
  });

  it('another giving up trick bug', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "", "", "K,4", "");
    given(DirectionCollection.WEST_INSTANCE, "6", "", "5", "");
    given(DirectionCollection.NORTH_INSTANCE, "10", "", "", "9");
    given(DirectionCollection.EAST_INSTANCE, "2", "", "J", "");
    givenTrump(Spades);
    whenLeadBy(DirectionCollection.EAST_INSTANCE);
    shouldWinTricks(0);
  });

  it('play the trump', () => {
    given(DirectionCollection.SOUTH_INSTANCE, "6,4,2", "J,10", "A,8", "A,Q,J,10");
    given(DirectionCollection.WEST_INSTANCE, "", "Q,8,5,4,3", "J,4,3", "K,6,5");
    given(DirectionCollection.NORTH_INSTANCE, "K,Q,9,8", "A,6", "9,7,2", "9,3");
    given(DirectionCollection.EAST_INSTANCE, "J,10", "K,9,7,2", "Q", "8,7,4,2");
    givenTrump(Clubs);
    whenLeadBy(DirectionCollection.SOUTH_INSTANCE, Two.of(Spades));
    shouldPlay(DirectionCollection.WEST_INSTANCE, Six.of(Clubs));
  });

  it('test no endgame bug', () => {
    given(DirectionCollection.NORTH_INSTANCE, "9", "6", "", "");
    given(DirectionCollection.EAST_INSTANCE, "", "K,9", "", "");
    given(DirectionCollection.SOUTH_INSTANCE, "4", "J", "", "");
    given(DirectionCollection.WEST_INSTANCE, "", "3,8", "", "");
    givenTrump(Clubs);
    whenLeadBy(DirectionCollection.NORTH_INSTANCE, Nine.of(Spades));
    followedBy(DirectionCollection.EAST_INSTANCE, Nine.of(Hearts));
    followedBy(DirectionCollection.SOUTH_INSTANCE, Four.of(Spades));
    shouldPlay(DirectionCollection.WEST_INSTANCE, Three.of(Hearts));
    shouldWinTricks(1);
  });

});

